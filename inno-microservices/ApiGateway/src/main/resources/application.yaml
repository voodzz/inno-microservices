server:
  port: 8080

spring:
  application:
    name: ApiGateway
  cloud:
    gateway:
      server:
        webflux:
          routes:
            - id: user-service
              uri: ${USER_SERVICE_URI:http://localhost:8081}
              predicates:
                - Path=/api/v1/users/**
              filters:
                - name: JwtAuthFilter
                - name: CircuitBreaker
                  args:
                    name: userService
                    fallbackUri: forward:/fallback/auth

            - id: auth-service
              uri: ${AUTH_SERVICE_URI:http://localhost:8082}
              predicates:
                - Path=/api/v1/auth/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: authService
                    fallbackUri: forward:/fallback/users

            - id: order-service
              uri: ${ORDER_SERVICE_URI:http://localhost:8083}
              predicates:
                - Path=/api/v1/orders/**
              filters:
                - name: JwtAuthFilter
                - name: CircuitBreaker
                  args:
                    name: orderService
                    fallbackUri: forward:/fallback/orders

security:
  jwt:
    secret-key: c528ba3b9bf887b6367e34761df7e6f1847cadf5a7b3e8820eac53ac96eca997
    access-expiration-time: 900000
    refresh-expiration-time: 86400000

user:
  service:
    uri: ${USER_SERVICE_URI:http://localhost:8081}

auth:
  service:
    uri: ${AUTH_SERVICE_URI:http://localhost:8082}

resilience4j:
  circuitbreaker:
    instances:
      userService:
        failure-rate-threshold: 50
        wait-duration-in-open-state:
          seconds: 30
        sliding-window-size: 10
      authService:
        failure-rate-threshold: 50
        wait-duration-in-open-state:
          seconds: 30
        sliding-window-size: 10
      orderService:
        failure-rate-threshold: 50
        wait-duration-in-open-state:
          seconds: 30
        sliding-window-size: 10