name: CI pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  checks: write
  statuses: write

env:
  MODULE_PATH: .
  GRADLE_PROJECT_NAME: UserService
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.14.3'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        options: --name redis_server --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6379:6379

      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
        options: --name postgres_server --health-cmd "pg_isready -U testuser -d testdb" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Show workspace (for debugging)
        run: |
          echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
          ls -la .
          echo "=== find first-level dirs ==="
          find . -maxdepth 2 -type d -print

      - name: Detect module path (find gradlew)
        id: detect
        run: |
          if [ -x "./gradlew" ] || [ -f "./gradlew" ]; then
            echo "MODULE_PATH=." >> $GITHUB_ENV
          else
            FOUND=$(find . -maxdepth 4 -type f -name gradlew -printf '%h\n' | head -n 1 || true)
            if [ -n "$FOUND" ]; then
              STRIPPED=${FOUND#./}
              echo "MODULE_PATH=$STRIPPED" >> $GITHUB_ENV
            else
              echo "MODULE_PATH=." >> $GITHUB_ENV
            fi
          fi
          echo "Detected MODULE_PATH = $MODULE_PATH"

      - name: Setup Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}

      - name: Ensure gradlew is executable
        run: chmod +x "${{ env.MODULE_PATH }}/gradlew"

      - name: 1. Build UserService (Skip Tests)
        working-directory: ${{ env.MODULE_PATH }}
        run: ./gradlew build -x test

      - name: Wait for Database and Redis Services
        run: |
          for i in $(seq 1 10); do 
            nc -z -w 1 postgres 5432 && echo "Postgres is up!" && break
            echo "Waiting for Postgres... ($i)"
            sleep 1
          done
          for i in $(seq 1 10); do 
            nc -z -w 1 redis 6379 && echo "Redis is up!" && break
            echo "Waiting for Redis... ($i)"
            sleep 1
          done

      - name: 2. Run Unit and Integration Tests
        working-directory: ${{ env.MODULE_PATH }}
        env:
          SPRING_REDIS_HOST: redis
          SPRING_REDIS_PORT: 6379
          SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpassword
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
          TESTCONTAINERS_REUSE_ENABLE: true
        run: ./gradlew test

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: UserService-jar
          path: ${{ env.MODULE_PATH }}/build/libs/*.jar
          retention-days: 1

      - name: Publish Test Report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Unit Tests
          path: ${{ env.MODULE_PATH }}/build/test-results/test/TEST-*.xml
          reporter: java-junit

  sonarqube-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # fetch-depth: 0 is correct for Sonar to analyze the whole history
          fetch-depth: 0

      - name: Detect module path (find gradlew)
        id: detect-sonar
        run: |
          if [ -x "./gradlew" ] || [ -f "./gradlew" ]; then
            echo "MODULE_PATH=." >> $GITHUB_ENV
          else
            FOUND=$(find . -maxdepth 4 -type f -name gradlew -printf '%h\n' | head -n 1 || true)
            if [ -n "$FOUND" ]; then
              STRIPPED=${FOUND#./}
              echo "MODULE_PATH=$STRIPPED" >> $GITHUB_ENV
            else
              echo "MODULE_PATH=." >> $GITHUB_ENV
            fi
          fi
          echo "Detected MODULE_PATH = $MODULE_PATH"

      # --- START: SonarQube analysis changes ---
      - name: Download JaCoCo Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: jacoco-report
          # Download the artifact to the location where SonarQube will look for it
          path: ${{ env.MODULE_PATH }}/build/reports/jacoco/test/

      - name: Ensure gradlew is executable (sonar)
        run: chmod +x "${{ env.MODULE_PATH }}/gradlew"

      - name: Setup Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}

      - name: Build module (prepare for Sonar analysis)
        working-directory: ${{ env.MODULE_PATH }}
        # This step is necessary to re-compile the code for the Sonar scanner
        run: ./gradlew build -x test

      - name: "Sanity - print Sonar env (masked)"
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Simplified the check; if secrets are missing, the sonar task will fail
          echo "SONAR_HOST_URL is set? -> ${SONAR_HOST_URL:+yes}"
          echo "SONAR_TOKEN is set? -> ${SONAR_TOKEN:+yes}"

      - name: 3. SonarQube Analysis
        working-directory: ${{ env.MODULE_PATH }}
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew sonar \
            -Dsonar.host.url="$SONAR_HOST_URL" \
            -Dsonar.login="$SONAR_TOKEN" \
            -Dsonar.projectKey="${{ github.repository }}/UserService" \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java \
            -Dsonar.java.binaries=build/classes/java/main \
            # NEW: Point SonarQube to the JaCoCo XML report downloaded above
            -Dsonar.coverage.jacoco.xmlReportPaths=${{ env.MODULE_PATH }}/build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.gradle.skipCompile=true
      # --- END: SonarQube analysis changes ---

  docker-build-push:
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: UserService-jar
          path: ${{ env.MODULE_PATH }}/build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 4. Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.MODULE_PATH }}/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/user-service:latest
            ghcr.io/${{ github.repository_owner }}/user-service:${{ github.sha }}
