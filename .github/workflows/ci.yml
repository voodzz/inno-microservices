name: CI pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  checks: write
  statuses: write

env:
  MODULE_PATH: .
  GRADLE_PROJECT_NAME: UserService
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.14.3'
  DOCKER_IMAGE: userservice:latest
  SONAR_PROJECT_KEY: UserService
  SONAR_ORG: your-sonar-org
  SONAR_HOST_URL: https://sonarcloud.io

jobs:
  build-test-analyze:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        options: --name redis_server --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6379:6379

      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
        options: --name postgres_server --health-cmd "pg_isready -U testuser -d testdb" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Show workspace
      run: |
        echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
        ls -la .

    - name: Detect module path (find gradlew)
      id: detect
      run: |
        if [ -x "./gradlew" ] || [ -f "./gradlew" ]; then
          echo "MODULE_PATH=." >> $GITHUB_ENV
        else
          FOUND=$(find . -maxdepth 4 -type f -name gradlew -printf '%h\n' | head -n 1 || true)
          STRIPPED=${FOUND#./}
          echo "MODULE_PATH=${STRIPPED:-.}" >> $GITHUB_ENV
        fi
        echo "Detected MODULE_PATH = $MODULE_PATH"

    - name: Setup Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: ${{ env.GRADLE_VERSION }}

    - name: Ensure gradlew is executable
      run: chmod +x "${{ env.MODULE_PATH }}/gradlew"

    - name: 1. Build (Skip Tests)
      working-directory: ${{ env.MODULE_PATH }}
      run: ./gradlew build -x test

    - name: Wait for Database and Redis Services
      run: |
        for i in $(seq 1 10); do nc -z -w 1 postgres 5432 && echo "Postgres is up!" && break; sleep 1; done
        for i in $(seq 1 10); do nc -z -w 1 redis 6379 && echo "Redis is up!" && break; sleep 1; done

    - name: 2. Run Unit and Integration Tests
      working-directory: ${{ env.MODULE_PATH }}
      env:
        SPRING_REDIS_HOST: redis
        SPRING_REDIS_PORT: 6379
        SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/testdb
        SPRING_DATASOURCE_USERNAME: testuser
        SPRING_DATASOURCE_PASSWORD: testpassword
        SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
        TESTCONTAINERS_REUSE_ENABLE: true
      run: ./gradlew test

    - name: Upload JAR Artifact
      uses: actions/upload-artifact@v4
      with:
        name: UserService-jar
        path: ${{ env.MODULE_PATH }}/build/libs/*.jar
        retention-days: 1

    - name: Publish Test Report
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Unit Tests
        path: ${{ env.MODULE_PATH }}/build/test-results/test/TEST-*.xml
        reporter: java-junit

    - name: 3. SonarQube Analysis
      uses: sonarsource/sonarcloud-github-action@v2
      with:
        organization: ${{ env.SONAR_ORG }}
        projectKey: ${{ env.SONAR_PROJECT_KEY }}
        projectBaseDir: ${{ env.MODULE_PATH }}
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: 4. Build Docker Image
      run: |
        echo "--- [STEP 4: DOCKER BUILD] Creating Docker image $DOCKER_IMAGE ---"
        docker build -t $DOCKER_IMAGE ${{ env.MODULE_PATH }}

    - name: 5. Push Docker Image (optional)
      if: github.ref == 'refs/heads/main'
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker tag $DOCKER_IMAGE $DOCKER_USERNAME/$DOCKER_IMAGE
        docker push $DOCKER_USERNAME/$DOCKER_IMAGE
