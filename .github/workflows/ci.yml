name: CI pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # default fallback (will be overridden by detect step if a gradlew is found)
  MODULE_PATH: .
  GRADLE_PROJECT_NAME: UserService
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.14.3'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        options: --name redis_server --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6379:6379

      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
        options: --name postgres_server --health-cmd "pg_isready -U testuser -d testdb" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Show workspace (for debugging)
      run: |
        echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
        ls -la .
        echo "=== find first-level dirs ==="
        find . -maxdepth 2 -type d -print

    - name: Detect module path (find gradlew)
      id: detect
      run: |
        # If gradlew exists at repo root use that, otherwise search up to 4 levels deep
        if [ -x "./gradlew" ] || [ -f "./gradlew" ]; then
          echo "Found gradlew at repo root"
          echo "MODULE_PATH=." >> $GITHUB_ENV
        else
          # find directories containing a file named 'gradlew'
          FOUND=$(find . -maxdepth 4 -type f -name gradlew -printf '%h\n' | head -n 1 || true)
          if [ -n "$FOUND" ]; then
            # strip leading ./ if present
            STRIPPED=${FOUND#./}
            echo "Found gradlew in: $STRIPPED"
            echo "MODULE_PATH=$STRIPPED" >> $GITHUB_ENV
          else
            echo "No gradlew found; falling back to '.'"
            echo "MODULE_PATH=." >> $GITHUB_ENV
          fi
        fi
        echo "Detected MODULE_PATH = $MODULE_PATH (env will be available to next steps)"

    - name: Setup Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: ${{ env.GRADLE_VERSION }}

    - name: Ensure gradlew is executable
      run: chmod +x "${{ env.MODULE_PATH }}/gradlew"
      # if MODULE_PATH is '.' this targets ./gradlew

    - name: 1. Build UserService (Skip Tests)
      working-directory: ${{ env.MODULE_PATH }}
      run: |
        echo "--- [STEP 1: BUILD] Запуск сборки UserService in $PWD ---"
        ./gradlew build -x test

    - name: Wait for Database and Redis Services
      run: |
        echo "Waiting for PostgreSQL service (postgres:5432)..."
        for i in $(seq 1 10); do 
          nc -z -w 1 postgres 5432 && echo "Postgres is up!" && break
          echo "Waiting... ($i)"
          sleep 1
        done

        echo "Waiting for Redis service (redis:6379)..."
        for i in $(seq 1 10); do 
          nc -z -w 1 redis 6379 && echo "Redis is up!" && break
          echo "Waiting... ($i)"
          sleep 1
        done

    - name: 2. Run Unit and Integration Tests
      working-directory: ${{ env.MODULE_PATH }}
      env:
        SPRING_REDIS_HOST: redis
        SPRING_REDIS_PORT: 6379

        SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/testdb
        SPRING_DATASOURCE_USERNAME: testuser
        SPRING_DATASOURCE_PASSWORD: testpassword
        SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
        TESTCONTAINERS_REUSE_ENABLE: true

      run: |
        echo "--- [STEP 2: TESTING] Запуск тестов UserService ---"
        ./gradlew test

    - name: Upload JAR Artifact
      uses: actions/upload-artifact@v4
      with:
        name: UserService-jar
        path: ${{ env.MODULE_PATH }}/build/libs/*.jar
        retention-days: 1

    - name: Publish Test Report
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Unit Tests
        path: ${{ env.MODULE_PATH }}/build/test-results/test/TEST-*.xml
        reporter: java-junit

  sonarqube-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: ${{ env.GRADLE_VERSION }}

    - name: 3. SonarQube Analysis
      working-directory: ${{ env.MODULE_PATH }}
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        echo "--- [STEP 3: SONARQUBE] Запуск анализа кода (cwd: $PWD) ---"
        ./gradlew sonarqube \
          -Dsonar.projectKey="${{ github.repository }}/UserService" \
          -Dsonar.sources=src/main/java \
          -Dsonar.tests=src/test/java \
          -Dsonar.java.binaries=build/classes/java/main \
          -Dsonar.junit.reportPaths=build/test-results/test \
          -Dsonar.jacoco.reportPaths=build/jacoco/test.exec

  docker-build-push:
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download JAR Artifact
      uses: actions/download-artifact@v4
      with:
        name: UserService-jar
        path: ${{ env.MODULE_PATH }}/build/libs/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 4. Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ env.MODULE_PATH }}/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/user-service:latest
          ghcr.io/${{ github.repository_owner }}/user-service:${{ github.sha }}
